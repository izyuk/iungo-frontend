import React from 'react';
import { getCaptivePortalDefault } from '~/context/CaptivePortalDefault';

export default React.createContext({
    ...getCaptivePortalDefault(),
    addPortalName: () => {},
    setBackground: () => {},
    setBackgroundRepeating: () => {},
    setBackgroundPosition: () => {},
    // setBackgroundAttachment: () => {},
    setBackgroundSize: () => {},
    setLogo: () => {},
    setBorderStyle: () => {},
    setBackgroundStyle: () => {},
    setSizeStyle: () => {},
    setContainerVerticalPosition: () => {},
    setHeaderTopData: () => {},
    setHeaderDescriptionData: () => {},
    setLoginMethods: () => {},
    setFooterData: () => {},
    setLogoID: () => {},
    setBackgroundID: () => {},
    setCSS: () => {},
    redirectURLChanger: () => {},
    setButtonStyles: () => {},
    setSuccessMessageData: () => {},
    setExternalCssInfo: () => {},
    setGDPRSettings: () => {},
    setGDPRSettingsStatus: () => {},
    setGDPRCollection: () => {},
    dataToExclude: {
        successMessageStatus: false,
        gdprSettingsStatus: false,
        gdprSettingsSetting: 'No',
        gdprList: '',
        fontsList: '',
        fontName: 'Avenir',
        agreeWithTermsAndConditionsLabel: '',
        allowToUsePersonalInfoLabel: '',
        loader: false,
        publishedType: '',
        failed: false,
        notification: false,
        stylesApplied: false,
        styledElements: '',
        stylesArray: '',
        token: '',
        urlPath: '',
        localeData: {},
        locales: [],
        activeLocale: null,
    },
    loaderHandler: () => {},
    setSuccessMessageStatus: () => {},
    setNotification: () => {},
    resetGlobalState: () => {},
    setToken: () => {},
    previewCssGenerator: () => {},
    removeLogo: () => {},
    removeBackground: () => {},
    urlPathHandler: () => {},
    profileHandler: () => {},
    setTermsFromBE: () => {},
    setFontsCollection: () => {},
    setFontData: () => {},
    setFontBase64: () => {},
    setLocaleData: () => {},
    setActiveLocale: () => {},
    convertLocaleName: () => {},
    setTranslations: () => {},
    clearTranslations: () => {},

    previewDeviceType: 'desktop',
    mobileSettingsTouched: [],
    setPreviewDeviceType: () => {},
    setDeviceTypeSettingsTouched: () => {},
    checkDeviceTypeDataChanged: () => {},
});